using System;
using System.Xml.Linq;
using iDeal.Base;

namespace iDeal.Status
{
    public class StatusResponse : iDealResponse
    {
        /// <summary>
        /// Acquirer id (first four digits) + unique id generated by acquirer (last 12 digits)
        /// </summary>
        public string TransactionId { get; private set; }

        /// <summary>
        /// Status: success, cancelled, expired, failure or open
        /// </summary>
        public Status Status { get; private set; }

        public DateTime StatusDate { get; set; }
        /// <summary>
        /// Consumer name
        /// </summary>
        public string ConsumerName { get; private set; }

        /// <summary>
        /// Accountnumber of consumer
        /// </summary>
        public string ConsumerIBAN { get; private set; }
        public string ConsumerBIC { get; private set; }
        public decimal Amount { get; set; }
        public string Currency { get; set; }

        /// <summary>
        /// Thumbprint of public certificate
        /// </summary>
        public string Fingerprint { get; private set; }

        /// <summary>
        /// Digital signature provided by the bank/acceptant
        /// </summary>
        public string SignatureValue { get; private set; }

        /// <summary>
        /// Concatenation of speficied fields from the reponse, used for digital signature
        /// </summary>
        public string MessageDigest
        {
            get
            {
                return CreateDateTimeStamp +
                       TransactionId +
                       Status +
                       (Status == Status.Success ? ConsumerIBAN : "");
            }
        }

        /// <summary>
        /// Consumer city
        /// </summary>

        public StatusResponse(string xmlStatusResponse)
        {
            // Parse document
            var xDocument = XElement.Parse(xmlStatusResponse);
            XNamespace xmlNamespace = "http://www.idealdesk.com/ideal/messages/mer-acq/3.3.1";
            XNamespace xmlNamespaceSignature = "http://www.w3.org/2000/09/xmldsig#";

            // Create datetimestamp
            CreateDateTimeStamp = (xDocument.Element(xmlNamespace + "createDateTimestamp").Value);
            
            // Acquirer id
            AcquirerId = (int)xDocument.Element(xmlNamespace + "Acquirer").Element(xmlNamespace + "acquirerID");

            // TransactionId
            TransactionId = xDocument.Element(xmlNamespace + "Transaction").Element(xmlNamespace + "transactionID").Value;

            // Status
            switch (xDocument.Element(xmlNamespace + "Transaction").Element(xmlNamespace + "status").Value)
            {
                case "Success":
                    Status = Status.Success;
                    break;
                case "Cancelled":
                    Status = Status.Cancelled;
                    break;
                case "Expired":
                    Status = Status.Expired;
                    break;
                case "Failure":
                    Status = Status.Failure;
                    break;
                case "Open":
                    Status = Status.Open;
                    break;
                default:
                    throw new InvalidOperationException("Received unknown status");
            }

            if (Status == Status.Success)
            {
                // Status date
                StatusDate = DateTime.Parse(xDocument.Element(xmlNamespace + "Transaction").Element(xmlNamespace + "statusDateTimestamp").Value);

                // Consumer name
                ConsumerName = xDocument.Element(xmlNamespace + "Transaction").Element(xmlNamespace + "consumerName").Value;

                // Consumer IBAN
                ConsumerIBAN = xDocument.Element(xmlNamespace + "Transaction").Element(xmlNamespace + "consumerIBAN").Value;

                // Consumer BIC
                ConsumerBIC = xDocument.Element(xmlNamespace + "Transaction").Element(xmlNamespace + "consumerBIC").Value;

                // Amount
                Amount = Decimal.Parse(xDocument.Element(xmlNamespace + "Transaction").Element(xmlNamespace + "amount").Value);

                // Currency
                Currency = xDocument.Element(xmlNamespace + "Transaction").Element(xmlNamespace + "currency").Value;
            }

            // Signature value
            SignatureValue = xDocument.Element(xmlNamespaceSignature + "Signature").Element(xmlNamespaceSignature + "SignatureValue").Value;

            // Fingerprint
            Fingerprint = xDocument.Element(xmlNamespaceSignature + "Signature").Element(xmlNamespaceSignature + "KeyInfo").Element(xmlNamespaceSignature + "KeyName").Value;

        }
    }
}
